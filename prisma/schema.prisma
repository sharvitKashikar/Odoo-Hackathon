generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

enum QuestionStatus {
  OPEN
  CLOSED
  ANSWERED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum NotificationType {
  NEW_ANSWER
  ANSWER_ACCEPTED
  COMMENT_REPLY
  MENTION
  QUESTION_UPVOTE
  ANSWER_UPVOTE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  reputation    Int       @default(0)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  answers       Answer[]
  votes         Vote[]
  comments      Comment[]
  notifications Notification[]
  mentions      Mention[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id               String         @id @default(cuid())
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title            String
  description      String         @db.Text
  tags             String[]

  //
  slug             String         @unique
  status           QuestionStatus @default(OPEN)
  views            Int            @default(0)
  acceptedAnswerId String?        @unique
  authorId         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  votes          Vote[]
  comments       Comment[]
  mentions       Mention[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  content    String   @db.Text
  isAccepted Boolean  @default(false)
  questionId String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author           User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes            Vote[]
  comments         Comment[]
  mentions         Mention[]

  @@map("answers")
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  userId     String
  questionId String?
  answerId   String?
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@unique([userId, answerId])
  @@map("votes")
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  authorId   String
  questionId String?
  answerId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  mentions Mention[]

  @@map("comments")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Mention {
  id         String   @id @default(cuid())
  userId     String
  questionId String?
  answerId   String?
  commentId  String?
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  comment  Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("mentions")
}